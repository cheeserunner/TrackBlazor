@page "/"

@using System.Diagnostics
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<PageTitle>Multi Athlete Track Timer</PageTitle>
<div class="minimalPadding" style="@(editMode ? "display:none;":"")">
    <div class="flexCont" style="gap:10px">
        <FluentButton Appearance="Appearance.Accent" @onclick="StartStopAll" Style="width:100%;"> @(allStarted ? "Stop All" : "Start All")</FluentButton>
        <FluentButton Appearance="Appearance.Accent" @onclick="ResetAll" IconEnd="new Icons.Regular.Size24.ArrowReset()"></FluentButton>
        <FluentButton Appearance="Appearance.Accent" @onclick="switchEditMode" IconEnd="new Icons.Regular.Size24.LauncherSettings()"></FluentButton>
    </div>
    <FluentGrid Spacing="1" Justify="JustifyContent.FlexStart" Style="padding-top:10px;">
        @foreach (var timer in timers)
        {
            <FluentGridItem xs="6">
                <FluentCard MinimalStyle="true">
                    <h6 style="text-align: center; margin-bottom:2px">@timer.Name</h6>
                    <div class="flexCont" style="justify-content:space-between;">
                        <div style="flex:0 0 100px; width:100px; font-size:26px; margin-top:3px;">@timer.Stopwatch.Elapsed.ToString(timeFormat)</div>
                        <div style="flex:0 1 150px;display: flex; justify-content: flex-end; gap:3px;">
                            @if (@timer.Stopwatch.IsRunning)
                            {
                                <FluentButton Class="access" back @onclick="timer.Stopwatch.Stop"  IconEnd="new Icons.Regular.Size24.Stop()"></FluentButton>
                                <FluentButton Appearance="Appearance.Accent" @onclick="timer.TakeSplit">Lap</FluentButton>
                            }
                            else
                            {
                                <FluentButton Appearance="Appearance.Accent" @onclick="timer.Reset" IconEnd="new Icons.Regular.Size24.ArrowReset()"></FluentButton>

                                <FluentButton Appearance="Appearance.Accent" @onclick="timer.Stopwatch.Start" IconEnd="new Icons.Regular.Size24.PlayCircle()"></FluentButton>
                            }
                        </div>
                    </div>
                    <hr style="margin:2px;" />
                    @for (var s = timer.Splits.Count; s > 0; s--)
                    {
                        var split = timer.Splits[s - 1];
                        <div class="flexCont">
                            <div class="num">@s</div>
                            <div class="column">@split.SplitTime.ToString(timeFormat)</div>
                            <div class="column">@split.Ellapsed.ToString(timeFormat)</div>
                        </div>
                    }

                </FluentCard>
            </FluentGridItem>
        }
    </FluentGrid>

</div>

<div style="@(editMode ? "": "display:none;")">
    <FluentCard MinimalStyle="true">
        <div style="top:10px; right:10px; position: absolute;">
            <FluentButton Appearance="Appearance.Accent" @onclick="switchEditMode" IconEnd="new Icons.Regular.Size24.SaveArrowRight()" >
            </FluentButton>
        </div>
 
        <h4>Re-name timers</h4>
        @foreach (var timer in timers)
        {
            <div class="flexCont" style="gap:5px;">
                <div>
                    <FluentTextField @bind-Value="timer.Name" Placeholder="@($"Stopwatch #" + timers.IndexOf(timer))"></FluentTextField>
                </div>
                <div>
                    <FluentButton Class="access" BackgroundColor="--bs-warning-bg-subtle" back @onclick="(()=> timers.Remove(timer))" IconEnd="new Icons.Regular.Size24.Delete()"></FluentButton>
                </div>
            </div>
        }
        <div style="padding-top:5px;">
            <FluentButton Appearance="Appearance.Accent" @onclick="AddTimer" IconStart="new Icons.Regular.Size24.AddCircle()">Add Timer</FluentButton>
        </div>
    </FluentCard>
</div>



<style>
    div.minimalPadding div.fluent-card-minimal-style {
        padding: 2px 5px 2px 5px;
    }

    div.minimalPadding div.fluent-card-minimal-style {
        padding: 2px 5px 2px 5px;
    }

    .flexCont {
        display: flex;
        flex-wrap: nowrap;
        align-content: flex-start;
    }

    .column {
        flex: 0 0 calc(50% - 10px);
        align-self: flex-start;
    }

    .num {
        flex: 0 0 20px;
    }
</style>

@code {
    private int currentCount = 6;
    string timeFormat = @"mm\:ss\.ff";
    bool editMode = false;
    List<Timer> timers = new List<Timer>()
    {
        new Timer("Runner-1"),new Timer("Runner-2"),new Timer("Runner-3"),new Timer("Runner-4"),new Timer("Runner-5"),new Timer("Runner-6")
    };
    bool allStarted = false;

    private void StartStopAll()
    {
        if (!allStarted)
        {
            Parallel.ForEach(timers, (t) =>
            {
                t.Stopwatch.Start();
            });
        }
        else
        {
            Parallel.ForEach(timers, (t) =>
            {
                if (t.Stopwatch.IsRunning)
                    t.Stopwatch.Stop();
            });
        }
        allStarted = !allStarted;
    }
    private void ResetAll()
    {
        Parallel.ForEach(timers, (t) =>
           {
               t.Reset();
           });
        allStarted = false;
    }
    private void switchEditMode()
    {
        editMode = !editMode;
    }
    private void AddTimer()
    {
        timers.Add(new Timer("Runner-" + ++currentCount));
    }
    PeriodicTimer periodicTimer = new(TimeSpan.FromMilliseconds(10));

    protected override void OnInitialized()
    {
        RunTimer();  // fire-and-forget
    }

    async void RunTimer()
    {
        while (await periodicTimer.WaitForNextTickAsync()) { StateHasChanged(); }
    }

    public void Dispose()
    {
        periodicTimer?.Dispose();
    }
    public class Timer
    {
        public Timer(string name)
        {
            this.Name = name;
        }
        public bool editMode { get; set; } = false;
        public string Name { get; set; }
        public Stopwatch Stopwatch { get; set; } = new Stopwatch();
        public List<Split> Splits { get; set; } = new List<Split>();
        public void TakeSplit()
        {
            var ts = this.Stopwatch.Elapsed;
            var last = this.Splits.LastOrDefault();
            this.Splits.Add(new Split(ts, last?.Ellapsed));
        }
        public void Reset()
        {
            this.Stopwatch.Reset();
            this.Splits.Clear();
        }
    }
    public class Split
    {
        public TimeSpan Ellapsed { get; set; }
        public TimeSpan SplitTime { get; set; }

        public Split(TimeSpan ts, TimeSpan? previous)
        {
            this.Ellapsed = ts;
            if (previous.HasValue)
                this.SplitTime = ts - previous.Value;
            else
                this.SplitTime = ts;
        }
    }
}